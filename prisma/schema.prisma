datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id          String    @id @default(cuid())
  email       String    @unique
  username    String?   @unique
  bio         String?
  avatarUrl   String?
  posts       Post[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  following   Follow[]  @relation("Following")
  followers   Follow[]  @relation("Followers")
  likes       Like[]    
  comments    Comment[] 
  commentLikes CommentLike[]
}

model Post {
  id          String    @id @default(uuid())
  title       String
  content     String?
  fileUrl     String?
  authorId    String
  author      User      @relation(fields: [authorId], references: [id])
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  likes       Like[]    
  comments    Comment[] 
  engine      String    @default("Unity")
  status      String?
}

model Follow {
  id          Int      @id @default(autoincrement())
  followerId  String
  follower    User     @relation("Following", fields: [followerId], references: [id])
  followingId String
  following   User     @relation("Followers", fields: [followingId], references: [id])
  createdAt   DateTime @default(now())
}

model Like {
  id          Int      @id @default(autoincrement())
  createdAt   DateTime @default(now())
  userId      String
  user        User     @relation(fields: [userId], references: [id])
  postId      String
  post        Post     @relation(fields: [postId], references: [id])
  @@unique([userId, postId]) // Ensure a user can like a post only once
}

model CommentLike {
  id          Int      @id @default(autoincrement())
  createdAt   DateTime @default(now())
  userId      String
  user        User     @relation(fields: [userId], references: [id])
  commentId   Int
  comment     Comment  @relation(fields: [commentId], references: [id])
  @@unique([userId, commentId]) // Ensure a user can like a comment once
}

model Comment {
  id          Int      @id @default(autoincrement())
  content     String
  createdAt   DateTime @default(now())
  userId      String
  user        User     @relation(fields: [userId], references: [id])
  postId      String
  post        Post     @relation(fields: [postId], references: [id])
  parentId    Int?
  parent      Comment? @relation("CommentReplies", fields: [parentId], references: [id])
  children    Comment[] @relation("CommentReplies")
  commentLikes CommentLike[]
}
